import sys
import generators.short_words as sw
from toolz import functoolz
import inflection_service as infl
from functools import reduce
from operator import concat

sys.path.append("../../word-analyser/")
import word_analyser.tools as tools

def inflected_forms(word):
    """Retuns all the inflected forms of the given word as a set, such as for the
    word vuoto;noun-valo-av1
    """
    inflection_forms = infl.inflected_forms(word)
    return inflection_forms

def strokefy(inflection_forms):
    return [[w, sw.safe_parse_short_word(w)]
            for w in inflection_forms]

def matched(word_and_stroke):
    print(word_and_stroke)
    word, stroke = word_and_stroke
    return stroke is not None and not stroke.endswith("None")

def flatten_dictify_matched(words_and_strokes):
    stroke_found = lambda w, s: s is not None and w is not None
    found_strokes = {w: s
                     # each inflected form has its own stroke here
                     for inflections_and_strokes in words_and_strokes
                     for w,s in inflections_and_strokes
                     if stroke_found(w, s)}
    return found_strokes

def write_to_yaml_file(target_file, strokes):
    return tools.save_results_into_file(strokes, target_file)

def main():
    words_raw = tools.get_finnish_wordlist()
    print("Loaded {} Finnish language words and abbreviations.".format(len(words_raw)))

    strokes = functoolz.thread_last(words_raw,
                                    (map, inflected_forms),
                                    (map, strokefy),
                                    flatten_dictify_matched)

    target_file = "../input_dictionaries/autogenerated_words_joukahainen.yaml"
    write_to_yaml_file(target_file, strokes)
    return 0

if __name__ == '__main__':
    sys.exit(main())
